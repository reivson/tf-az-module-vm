name: 'Terraform Module CI/CD'

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  # Job 1: Validação básica
  validate:
    name: 'Terraform Validate'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.5

    - name: Terraform Format Check
      run: terraform fmt -check -recursive

    - name: Terraform Init
      run: terraform init

    - name: Terraform Validate
      run: terraform validate

    - name: Validate Examples
      run: |
        for example in examples/*/; do
          echo "Validating $example"
          cd "$example"
          terraform init
          terraform validate
          cd - > /dev/null
        done

  # Job 2: Análise de segurança
  security:
    name: 'Security Scan'
    runs-on: ubuntu-latest
    needs: validate

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Run tfsec
      uses: aquasecurity/tfsec-action@v1.0.3
      with:
        soft_fail: true

    - name: Run Checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        soft_fail: true
        framework: terraform

  # Job 3: Documentação
  docs:
    name: 'Generate Documentation'
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Render terraform docs inside the README.md
      uses: terraform-docs/gh-actions@v1.0.0
      with:
        working-dir: .
        output-file: INPUTS.md
        output-method: replace
        git-push: "true"

  # Job 4: Testes (apenas em releases)
  test:
    name: 'Integration Tests'
    runs-on: ubuntu-latest
    needs: [validate, security]
    if: github.event_name == 'release'
    
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.19'

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.5

    - name: Go Cache
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Run Tests
      run: |
        cd tests
        go mod download
        go test -v -timeout 60m

  # Job 5: Release
  release:
    name: 'Create Release'
    runs-on: ubuntu-latest
    needs: [validate, security, docs]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get next version
      uses: reecetech/version-increment@2023.9.3
      id: version
      with:
        scheme: semver
        increment: patch

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.version }}
        release_name: Release v${{ steps.version.outputs.version }}
        body: |
          ## Changes
          
          - Automated release
          - See commit history for detailed changes
          
          ## Installation
          
          ```hcl
          module "vm" {
            source  = "github.com/your-org/tf-az-module-vm?ref=v${{ steps.version.outputs.version }}"
            # ... configuration
          }
          ```
          
        draft: false
        prerelease: false
